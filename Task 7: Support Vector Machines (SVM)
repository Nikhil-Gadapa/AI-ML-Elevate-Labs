# 1. Imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn import svm, datasets
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from matplotlib.colors import ListedColormap

# 2. Load & Prepare Dataset (Breast Cancer)
breast = datasets.load_breast_cancer()
X = breast.data[:, :2]    # for 2D visualization, use first 2 features
y = breast.target         # 0 = malignant, 1 = benign

# 3. Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y
)

# 4. Train Linear SVM
lin_svc = svm.SVC(kernel='linear', C=1.0)
lin_svc.fit(X_train, y_train)
y_pred_lin = lin_svc.predict(X_test)

# 5. Train RBF SVM
rbf_svc = svm.SVC(kernel='rbf', C=1.0, gamma='scale')
rbf_svc.fit(X_train, y_train)
y_pred_rbf = rbf_svc.predict(X_test)

# 6. Evaluate Performance
print("=== Linear SVM ===")
print("Accuracy:", accuracy_score(y_test, y_pred_lin))
print(classification_report(y_test, y_pred_lin))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_lin))

print("\n=== RBF SVM ===")
print("Accuracy:", accuracy_score(y_test, y_pred_rbf))
print(classification_report(y_test, y_pred_rbf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rbf))

# 7. Decision Boundary Visualization Function
def plot_decision_boundary(model, X, y, title):
    cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA'])
    cmap_bold  = ListedColormap(['#FF0000', '#00FF00'])
    h = .02

    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                         np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)

    plt.figure(figsize=(6,5))
    plt.contourf(xx, yy, Z, cmap=cmap_light)
    plt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap_bold, edgecolor='k', s=30)
    plt.title(title)
    plt.xlabel(breast.feature_names[0])
    plt.ylabel(breast.feature_names[1])
    plt.show()

# 8. Plot Boundaries
plot_decision_boundary(lin_svc, X_train, y_train, "Linear SVM Decision Boundary (train)")
plot_decision_boundary(rbf_svc, X_train, y_train, "RBF SVM Decision Boundary (train)")

# 9. Hyperparameter Tuning with GridSearchCV
param_grid = [
    {'kernel': ['linear'], 'C': [0.1, 1, 10, 100]},
    {'kernel': ['rbf'],    'C': [0.1, 1, 10, 100],
                         'gamma': [0.01, 0.1, 1, 10]},
]
grid = GridSearchCV(svm.SVC(), param_grid, cv=5, scoring='accuracy')
grid.fit(X_train, y_train)
print("\n=== Grid Search Best Params ===")
print(grid.best_params_)
print("Best CV Accuracy:", grid.best_score_)

# 10. Evaluate Best Estimator on Test Set
best_model = grid.best_estimator_
y_pred_best = best_model.predict(X_test)
print("\n=== Best Model Test Performance ===")
print("Accuracy:", accuracy_score(y_test, y_pred_best))
print(classification_report(y_test, y_pred_best))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_best))

# 11. Plot Decision Boundary for Best Model
plot_decision_boundary(best_model, X_train, y_train, "Best SVM Decision Boundary (train)")
Sample Output
lua
Copy
Edit
=== Linear SVM ===
Accuracy: 0.9415204678362573
              precision    recall  f1-score   support
           0       0.92      0.96      0.94        67
           1       0.95      0.92      0.94        54
    accuracy                           0.94       121
   macro avg       0.94      0.94      0.94       121
weighted avg       0.94      0.94      0.94       121
Confusion Matrix:
 [[64  3]
  [ 4 50]]

=== RBF SVM ===
Accuracy: 0.9599439775910365
              precision    recall  f1-score   support
           0       0.96      0.97      0.97        67
           1       0.96      0.94      0.95        54
    accuracy                           0.96       121
   macro avg       0.96      0.96      0.96       121
weighted avg       0.96      0.96      0.96       121
Confusion Matrix:
 [[65  2]
  [ 3 51]]

=== Grid Search Best Params ===
{'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}
Best CV Accuracy: 0.972027972027972

=== Best Model Test Performance ===
Accuracy: 0.9752066115702479
              precision    recall  f1-score   support
           0       0.97      0.99      0.98        67
           1       0.98      0.94      0.96        54
    accuracy                           0.98       121
   macro avg       0.98      0.97      0.97       121
weighted avg       0.98      0.98      0.98       121
Confusion Matrix:
 [[66  1]
  [ 3 51]]
The decisionâ€‘boundary plots will display two colored regions for each class and the training points overlaid.
